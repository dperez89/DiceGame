"use strict";

// Need to try and find a way to keep erroneous user input from creating a hole for the program to fall through. 
// Possibly adjust winning condition parameters to slightly increase difficulty of winning the game.
// Possibly adjust menu options to try and make it so that selecting an option will actually return to gaining userInput instead of
	// creating another hole for the program to fall through. 

launchGame();

function launchGame(){
	let newGameStatus = true;
	let totalPoints = 0;
	let winStatus = false;
	let newOddEvenPoints;
	let newGreaterThanPoints;
	let diceResults;
	let userInput;

	while(newGameStatus == true){
		userInput = getUserInput();
		userInput = userInput.toLowerCase();
		if (userInput === "start"){
			newGameStatus = false;
			startGame();
			for(let turnsLeft = 4; turnsLeft > 0; turnsLeft--){
				diceResults = rollDice(totalPoints, turnsLeft);
				newOddEvenPoints = getOddEvenPoints(diceResults);
				newGreaterThanPoints = getGreaterThanPoints(diceResults);
				totalPoints += (newOddEvenPoints + newGreaterThanPoints);
				alert("You gain " + (newOddEvenPoints + newGreaterThanPoints) + " points from this turn!");
				alert("You now have a total of " + totalPoints + " points.");
				alert("You now have " + (turnsLeft - 1) + " turns left.")
				winStatus = checkWinConditions(totalPoints, turnsLeft);
				if(winStatus == true){
					exitGame();
					break;
				}
			}

		}
		else if(userInput === "exit"){
			newGameStatus = false;
			exitGame();
			return 0;
		}
		else if(userInput === "rules"){
			rules();
		}
		else{
			alert("Command not recognized, please try again");
		}
	}
}	

function getUserInput(){
	alert("Please make a selection!");
	let userInput = prompt("START\nRULES\nEXIT");
	userInput = userInput.toLowerCase();
	return userInput;
}

function startGame(){
	alert("You have started a game!");
	return 0;
}

function exitGame(){
	alert("Thanks for playing!");
	return 0;
}
function rules(userInput){
	alert("Welcome to David's Dice Game!\nThe rules of the game are simple.\nYou have 5 turns to achieve a either a 10-or-greater or -10-or-lesser\nPress ENTER or click OK to continue...");
	alert("Points are awarded based on if a dice is even (+1 point) and greater than 5 (+2 points) or 10 (+3 points)\n\nThey're also awarded based on if a dice is odd (-1 point) and greater than 5 (-2 points) or greater than 10 (-3 points)\nPress ENTER or click OK to continue...");
	alert("You are allowed a single re-roll each turn so use your best judgement to try and achieve the goal of 10 or -10 before you run out of turns!\n\nHave fun!");
	userInput = "start";
	return userInput;
}

function rollDice(totalPoints, turnsLeft){
		alert("You roll the dice!")
		let goodRollAgainInput = false
		let diceResults = [];
		let d4 = Math.floor(Math.random() * 4 + 1);
		let d6 = Math.floor(Math.random() * 6 + 1);
		let d8 = Math.floor(Math.random() * 8 + 1);
		let d10 = Math.floor(Math.random() * 10 + 1);
		let d12 = Math.floor(Math.random() * 12 + 1);
		let d20 = Math.floor(Math.random() * 20 + 1);
		diceResults.push(d4,d6,d8,d10,d12,d20);
		alert("You rolled " + diceResults + "\nYou currently have: " + totalPoints + " points.\nYou have " + turnsLeft + " turns left.");
		while(goodRollAgainInput === false){
			let rollAgain = prompt("Would you like to roll again? YES or NO.");
			rollAgain = rollAgain.toLowerCase();
			if(rollAgain == "yes"){
				goodRollAgainInput = true;
				diceResults = rollDiceAgain(totalPoints, turnsLeft);
				return diceResults;
			}
			else if (rollAgain == "no"){
				goodRollAgainInput = true;
				return diceResults;
			}
			else{
				alert("Command not recognized, please try again!");
			}
		}
}

function rollDiceAgain(totalPoints, turnsLeft){
		let diceResults = [];
		alert("You roll the dice a second time!");
		let d4 = Math.floor(Math.random() * 4 + 1);
		let d6 = Math.floor(Math.random() * 6 + 1);
		let d8 = Math.floor(Math.random() * 8 + 1);
		let d10 = Math.floor(Math.random() * 10 + 1);
		let d12 = Math.floor(Math.random() * 12 + 1);
		let d20 = Math.floor(Math.random() * 20 + 1);
		diceResults.push(d4,d6,d8,d10,d12,d20);
		alert("You rolled " + diceResults + "\nYou currently have: " + totalPoints + " points.\nYou have " + turnsLeft + " turns left.");
		return diceResults;
}

function getOddEvenPoints(diceResults){
	let newOddEvenPoints = 0;
	let evenNumberPoints = 1;
	let oddNumberPoints = -1;
	let evenNumberDivisor = 2;
	for (let i = 0; i < diceResults.length; i++){
		if (diceResults[i] % evenNumberDivisor == 0){
			newOddEvenPoints += evenNumberPoints;
		}
		else if(diceResults[i] % evenNumberDivisor != 0){
			newOddEvenPoints += oddNumberPoints;
		}
	}
	return newOddEvenPoints;
}

function getGreaterThanPoints(diceResults){
	let newGreaterThanPoints = 0;
	let evenGreaterThanTenPoints = 3;
	let oddGreaterThanTenPoints = -3;
	let evenGreaterThanFivePoints = 2;
	let oddGreaterThanFivePoints = -2;
	let evenNumberDivisor = 2;
	let greaterThanTen = 10;
	let greaterThanFive = 5;
	for(let i = 0; i < diceResults.length; i++){
		if(diceResults[i] % evenNumberDivisor == 0 && diceResults[i] >= greaterThanTen){
			newGreaterThanPoints += evenGreaterThanTenPoints;
		}
		else if(diceResults[i] % evenNumberDivisor != 0 && diceResults[i] >= greaterThanTen){
			newGreaterThanPoints += oddGreaterThanTenPoints;
		}
		else if(diceResults[i] % evenNumberDivisor == 0 && diceResults[i] >= greaterThanFive){
			newGreaterThanPoints += evenGreaterThanFivePoints;
		}
		else if(diceResults[i] % evenNumberDivisor != 0 && diceResults[i] >= greaterThanFive){
			newGreaterThanPoints += oddGreaterThanFivePoints;
		}
	}
	return newGreaterThanPoints;
}

function checkWinConditions(totalPoints, turnsLeft){
	let positiveWinThreshold = 10;
	let negativeWinThreshold = -10;
	if(totalPoints <= negativeWinThreshold || totalPoints >= positiveWinThreshold){
		alert("Congratulations, you have won the game by accumulating " + totalPoints + " points!")
		return true;
	}
	else if(turnsLeft === 1){
		alert("You've run out of turns! Game Over! (You finished the game with " + totalPoints + " points.\n\nBetter luck next time!");
		return true;
	}
}

function rollD4(){
	let d4 = Math.floor(Math.random() * 4 + 1);
	return d4;
}
function rollD6(){
	let d6 = Math.floor(Math.random() * 6 + 1);
	return d6;
}
function rollD8(){
	let d8 = Math.floor(Math.random() * 8 + 1);
	return d8;
}
function rollD10(){
	let d10 = Math.floor(Math.random() * 10 + 1);
	return d10;
}
function rollD12(){
	let d12 = Math.floor(Math.random() * 12 + 1);
	return d12;
}
function rollD20(){
	let d20 = Math.floor(Math.random() * 20 + 1);
	return d20;
}